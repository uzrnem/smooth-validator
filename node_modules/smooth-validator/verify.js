"use strict";
var dataType = require('./dataType');
exports.__esModule = true;
var Verify = /** @class */ (function () {
  function Verify() {
  }
  /*
   * Parse something like this {'estado' : 'in:show,hide'} into ['show', 'hide']
   */
  Verify.prototype.getAllowedArrayIn = function (variable) {
    if (variable.indexOf(',') > -1) {
      var arr = variable.split(',');
      return arr;
    }
    return [variable];
  };

  /*
   * Parse something like this {'name' : 'alpha|alphanumeric|max:20'}
   * into name:
   *[{ keys: 'alpha', value: null },
   * { keys: 'alphanumeric', value: null },
   * { keys: 'max', value: [Array] } ],
   */
  Verify.prototype.getDetailsInConditions = function (variable) {
   if (variable.indexOf(':') > -1) {
     var details = variable.split(":");
     return { keys: details[0], value: details[0] == 'in' ? this.getAllowedArrayIn(details[1]) : details[1] };
   }
   else {
     return { keys: variable, value: null };
   }
  };

  Verify.prototype.parseRules = function (variable) {
    var conditions = [];
    if (variable.indexOf('|') > -1) {
      //'name' : 'alpha|alphanumeric|max:20'
      var sltArr = variable.split("|");
      for (var c = 0; c < sltArr.length; c++) {
        conditions.push(this.getDetailsInConditions(sltArr[c]));
      }
    }
    else {
      conditions.push(this.getDetailsInConditions(variable));
    }
    return conditions;
  };

  /*
   *  Parse String rules to structure
   */
  Verify.prototype.getRules = function (validation) {
    var rules = {};
    for (var [variable,conditions] of Object.entries(validation)) {
      rules[variable] = this.parseRules(conditions);
    }
    return rules;
  };

  Verify.prototype.process = function (validation, formData) {
    var rules = this.getRules(validation);
    var error = false;
    var msg = '';
    var errors = [];
    for (var [variable,conditions] of Object.entries(validation)) {
      var nullable = conditions.indexOf('nullable') > -1;
      var required = conditions.indexOf('required') > -1;
      var varValue = formData[variable];
      if (required && !varValue && dataType.isEmpty(varValue)) {
        if (error) {
          errors.push({ key: variable, message: variable + ' is required' });
        }
        else {
          error = true;
          msg = variable + ' is required';
          errors.push({ key: variable, message: msg });
        }
        continue;
      }
      var varCondition = rules[variable];
      for (var i = 0; i < varCondition.length; i++) {
        var key = varCondition[i]['keys'];
        var extra = varCondition[i]['value'];
        if (!dataType.isEmpty(varValue) || !nullable) {
          var {resKey, resMsg} = this.checkVariableErrors(variable, varValue, key, extra);
          if (resKey && resMsg) {
            if (error) {
              errors.push({ key: resKey, message: resKey + resMsg });
            }
            else {
              error = true;
              msg = resKey + resMsg;
              errors.push({ key: resKey, message: msg });
            }
          }
        }
      }
    }
    return { success: !error, message: msg, errors: errors };
  };

  Verify.prototype.checkVariableErrors = function (variable, varValue, key, extra) {
    switch (key) {
      case 'alpha':
        if (!varValue.match(/^[a-z ]+$/i))
          return { resKey: variable, resMsg: ' is not alphabetic' };
        break;
      case 'alphanumeric':
        if (!varValue.match(/^[a-z 0-9]+$/i))
          return { resKey: variable, resMsg: ' is not alphanumeric' };
        break;
      case 'uppercase':
        if (!varValue.match(/^[A-Z]+$/))
          return { resKey: variable, resMsg: ' is not uppercase' };
        break;
      case 'lowercase':
        if (!varValue.match(/^[a-z]+$/))
          return { resKey: variable, resMsg: ' is not lowercase' };
        break;
      case 'required': break;
      case 'min':
        if (varValue.length < extra)
          return { resKey: variable, resMsg: "'s length is less than " + extra };
        break;
      case 'max':
        if (varValue.length > extra)
          return { resKey: variable, resMsg: "'s length is greater than " + extra };
        break;
      case 'email':
        if (!dataType.isEmail(varValue))
          return { resKey: variable, resMsg: ' is invalid' };
        break;
      case 'in':
        if (extra.indexOf(varValue) < 0)
          return { resKey: variable, resMsg: " is invalid" };
        break;
      case 'date':
        if (!dataType.isDate(varValue))
          return { resKey: variable, resMsg: ' is not date' };
        break;
      case 'numeric':
        if (!dataType.isNumber(varValue))
          return { resKey: variable, resMsg: ' is not number' };
        break;
      case 'nullable': break;
      default:
        return { resKey: variable, resMsg: ' is invalid validator on ' + variable };
        break;
    }
    return { resKey: false, resMsg: null };
  };
  return Verify;
}());
module.exports = function verify(formData, validation) {
  var v = new Verify();
  return v.process(validation, formData);
}
