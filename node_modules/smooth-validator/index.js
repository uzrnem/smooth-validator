const dataType = require('./dataType');
const stringFuncs = require('./functions/string');
const generalFuncs = require('./functions/general');
const numericFuncs = require('./functions/numeric');
const dateFuncs = require('./functions/date');
const booleanFuncs = require('./functions/boolean');
const paramFuncs = require('./functions/params');
const transalateFuncs = require('./functions/transalate')

function parseCondition(conditionStr) {
  var details = conditionStr.split(":");
  switch (details[0]) {
    //General
    case 'required': return paramFuncs.noExtraParams(conditionStr);
    case 'required_if': return paramFuncs.twoExtraParams(conditionStr);
    case 'same': return paramFuncs.oneExtraParams(conditionStr);
    //Boolean
    case 'boolean': return paramFuncs.noExtraParams(conditionStr);
    //Integer
    case 'numeric': return paramFuncs.noExtraParams(conditionStr);
    case 'between': return paramFuncs.twoExtraParams(conditionStr);
    case 'gt':
    case 'gte':
    case 'lt':
    case 'lte': return paramFuncs.oneExtraParams(conditionStr);
    case 'odd':
    case 'even': return paramFuncs.noExtraParams(conditionStr);
    //String
    case 'alpha':
    case 'alphanumeric':
    case 'uppercase':
    case 'lowercase': return paramFuncs.anyExtraParams(conditionStr);
    case 'min':
    case 'max':
    case 'size': return paramFuncs.oneExtraParams(conditionStr);
    case 'starts_with':
    case 'starts_not_with':
    case 'ends_with':
    case 'ends_not_with':
    case 'contains':
    case 'contains_any':
    case 'in':
    case 'not_in': return paramFuncs.manyExtraParams(conditionStr);
    //Email
    case 'email': return paramFuncs.noExtraParams(conditionStr);
    //Date
    case 'date': return paramFuncs.noExtraParams(conditionStr);
    case 'after':
    case 'after_or_equals':
    case 'before':
    case 'before_or_equals': return paramFuncs.oneExtraParams(conditionStr);
    default: throw "Invalid validation " + conditionStr + ", not allowed"
  }
}

function checkVariableErrors(varName, condKey, varValue, condValues, dataObj) {
  switch (condKey) {
    //General
    case 'required': return generalFuncs.validateRequired(varName, varValue)
    case 'required_if': return generalFuncs.validateRequiredIf(varName, varValue, condValues, dataObj)
    case 'same': return generalFuncs.validateSame(varName, varValue, condValues, dataObj)
    //Boolean
    case 'boolean': return booleanFuncs.validateBoolean(varName, varValue)
    //Integer
    case 'numeric': return numericFuncs.validateNumeric(varName, varValue)
    case 'between': return numericFuncs.validateBetween(varName, varValue, condValues, dataObj)
    case 'gt': return numericFuncs.validateGt(varName, varValue, condValues, dataObj)
    case 'gte': return numericFuncs.validateGte(varName, varValue, condValues, dataObj)
    case 'lt': return numericFuncs.validateLt(varName, varValue, condValues, dataObj)
    case 'lte': return numericFuncs.validateLte(varName, varValue, condValues, dataObj)
    case 'odd': return numericFuncs.validateOdd(varName, varValue)
    case 'even': return numericFuncs.validateEven(varName, varValue)
    //String
    case 'alpha': return stringFuncs.validateRegex('alpha', varName, varValue, condValues)
    case 'alphanumeric': return stringFuncs.validateRegex('alphanumeric', varName, varValue, condValues)
    case 'uppercase': return stringFuncs.validateCase('uppercase', varName, varValue, condValues)
    case 'lowercase': return stringFuncs.validateCase('lowercase', varName, varValue, condValues)
    case 'min': return stringFuncs.validateMin(varName, varValue, condValues)
    case 'max': return stringFuncs.validateMax(varName, varValue, condValues)
    case 'size': return stringFuncs.validateSize(varName, varValue, condValues)
    case 'starts_with': return stringFuncs.validateStartsWith(varName, varValue, condValues)
    case 'starts_not_with': return stringFuncs.validateStartsNotWith(varName, varValue, condValues)
    case 'ends_with': return stringFuncs.validateEndsWith(varName, varValue, condValues)
    case 'ends_not_with': return stringFuncs.validateEndsNotWith(varName, varValue, condValues)
    case 'contains': return stringFuncs.validateContains(varName, varValue, condValues)
    case 'contains_any': return stringFuncs.validateContainsAny(varName, varValue, condValues)
    case 'in': return stringFuncs.validateIn(varName, varValue, condValues)
    case 'not_in': return stringFuncs.validateNotIn(varName, varValue, condValues)
    //Email
    case 'email': return stringFuncs.validateEmail(varName, varValue)
    //Date
    case 'date': return dateFuncs.validateDate(varName, varValue)
    case 'after': return dateFuncs.validateDateComparison('after', varName, varValue, condValues, dataObj)
    case 'after_or_equals': return dateFuncs.validateDateComparison('after_or_equals', varName, varValue, condValues, dataObj)
    case 'before': return dateFuncs.validateDateComparison('before', varName, varValue, condValues, dataObj)
    case 'before_or_equals': return dateFuncs.validateDateComparison('before_or_equals', varName, varValue, condValues, dataObj)
    default: return { resKey: varName, resMsg: ' is invalid validator on ' + varName };
  }
}

var parser = function (rawRules, params = { date_format: null, transalation: {} }) {
  var parsedRules = {};
  for (var [variable, rawConditions] of Object.entries(rawRules)) {
    var parsedConditions = [];
    /* Parse something like this {'name' : 'alpha|max:20'} into name:
     * [{ keys: 'alpha', value: null },
     *  { keys: 'max', value: [Array] } ],
     */
    var condArr = rawConditions.split("|");
    for (var c = 0; c < condArr.length; c++) {
      parsedConditions.push(parseCondition(condArr[c]));
    }
    parsedRules[variable] = parsedConditions;
  }
  return function (dataObj) {
    var errors = [];
    for (var [variable, conditions] of Object.entries(parsedRules)) {
      var varValue = dataObj[variable];
      for (let c in conditions) {
        if (
          !dataType.isEmpty(varValue) ||
          conditions[c].key == "required" ||
          conditions[c].key == "required_if"
        ) {
          var err = checkVariableErrors(variable, conditions[c].key, varValue, conditions[c].value, dataObj);
          if (err != null) {
            errors.push(transalateFuncs(conditions[c].key, err, params.transalation))
          }
        }
      }
    }
    return { message: errors.length > 0 ? errors[0]['message']: 'validation passed', errors: errors };
  };
}
module.exports = parser