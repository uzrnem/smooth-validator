const dataType = require('smooth-validator/dataType');

module.exports = {
  validateMin: function (varName, varValue, values) {
    if (varValue.length < values[0])
      return { resKey: varName, resMsg: "'s length is less than " + values[0] };
    return { resKey: false, resMsg: null };
  },
  validateMax: function (varName, varValue, values) {
    if (varValue.length > values[0])
      return { resKey: varName, resMsg: "'s length is greater than " + values[0] };
    return { resKey: false, resMsg: null };
  },
  validateSize: function (varName, varValue, values) {
    if (varValue.length != values[0])
      return { resKey: varName, resMsg: "'s length not equal to " + values[0] };
    return { resKey: false, resMsg: null };
  },
  validateIn: function (varName, varValue, values) {
    if (!values.includes(varValue))
      return { resKey: varName, resMsg: "'s value is not in array" };
    return { resKey: false, resMsg: null };
  },
  validateNotIn: function (varName, varValue, values) {
    if (values.includes(varValue))
      return { resKey: varName, resMsg: "'s value is in invalid array" };
    return { resKey: false, resMsg: null };
  },
  validateEmail: function (varName, varValue) {
    if (!dataType.isEmail(varValue))
      return { resKey: varName, resMsg: ' is invalid' };
    return { resKey: false, resMsg: null };
  },
  validateRegex: function (type, varName, varValue, values) {
    var regex = '';
    if (type == 'alpha') {
      regex = 'a-z'
    }
    if (type == 'alphanumeric') {
      regex = 'a-z0-9'
    }
    if (values.includes('space')) { regex += ' '}
    if (values.includes('underscope')) { regex += '_'}
    if (values.includes('dash')) { regex += '-'}
    if (!varValue.match(new RegExp('^[' + regex + ']+$', 'i')))
      return { resKey: varName, resMsg: ' does not match ' + type };
    return { resKey: false, resMsg: null };
  },
  validateCase: function (type, varName, varValue, values) {
    var regex = '';
    if (type == 'lowercase') {
      regex = 'a-z'
    }
    if (type == 'uppercase') {
      regex = 'A-Z'
    }
    if (values.includes('space')) { regex += ' '}
    if (values.includes('underscope')) { regex += '_'}
    if (values.includes('dash')) { regex += '-'}
    if (!varValue.match(new RegExp('^[' + regex + ']+$')))
      return { resKey: varName, resMsg: ' does not match ' + type };
    return { resKey: false, resMsg: null };
  },
  validateStartsWith: function (varName, varValue, values) {
    var flag = false;
    for ( var c in values) {
      if (varValue.startsWith(values[c])) {
        flag = true;
      }
    }
    if (!flag)
      return { resKey: varName, resMsg: ' does not starts with ' + values };
    return { resKey: false, resMsg: null };
  },
  validateEndsWith: function (varName, varValue, values) {
    var flag = false;
    for ( var c in values) {
      if (varValue.endsWith(values[c])) {
        flag = true;
      }
    }
    if (!flag)
      return { resKey: varName, resMsg: ' does not ends with ' + values };
    return { resKey: false, resMsg: null };
  }
}