const dataType = require('smooth-validator/dataType');

module.exports = {
  validateMin: function (varName, varValue, values) {
    return (varValue.length < values[0]) ? { variable: varName, value: varValue, firstValue: values[0] } :null;
  },
  validateMax: function (varName, varValue, values) {
    return (varValue.length > values[0]) ? { variable: varName, value: varValue, firstValue: values[0] } :null;
  },
  validateSize: function (varName, varValue, values) {
    return (varValue.length != values[0]) ? { variable: varName, value: varValue, firstValue: values[0] } :null;
  },
  validateIn: function (varName, varValue, values) {
    return (!values.includes(varValue)) ? { variable: varName, value: varValue, firstValue: values } :null;
  },
  validateNotIn: function (varName, varValue, values) {
    return (values.includes(varValue)) ? { variable: varName, value: varValue, firstValue: values } :null;
  },
  validateEmail: function (varName, varValue) {
    return (!dataType.isEmail(varValue)) ? { variable: varName, value: varValue, firstValue: varValue } :null;
  },
  validateRegex: function (type, varName, varValue, values) {
    var regex = '';
    if (type == 'alpha') {
      regex = 'a-z'
    }
    if (type == 'alphanumeric') {
      regex = 'a-z0-9'
    }
    if (values.includes('space')) { regex += ' '}
    if (values.includes('underscope')) { regex += '_'}
    if (values.includes('dash')) { regex += '-'}
    if (!varValue.match(new RegExp('^[' + regex + ']+$', 'i')))
      return { variable: varName, value: varValue, firstValue: varValue };
    return null;
  },
  validateCase: function (type, varName, varValue, values) {
    var regex = '';
    if (type == 'lowercase') {
      regex = 'a-z'
    }
    if (type == 'uppercase') {
      regex = 'A-Z'
    }
    if (values.includes('space')) { regex += ' '}
    if (values.includes('underscope')) { regex += '_'}
    if (values.includes('dash')) { regex += '-'}
    if (!varValue.match(new RegExp('^[' + regex + ']+$')))
      return { variable: varName, value: varValue, firstValue: varValue };
    return null;
  },
  validateStartsWith: function (varName, varValue, values) {
    var flag = false;
    for ( var c in values) {
      if (varValue.startsWith(values[c])) {
        flag = true;
      }
    }
    return flag ? null : { variable: varName, value: varValue, firstValue: values }
  },
  validateStartsNotWith: function (varName, varValue, values) {
    for ( var c in values) {
      if (varValue.startsWith(values[c])) {
        return { variable: varName, value: varValue, firstValue: values[c] };
      }
    }
    return null;
  },
  validateEndsWith: function (varName, varValue, values) {
    var flag = false;
    for ( var c in values) {
      if (varValue.endsWith(values[c])) {
        flag = true;
      }
    }
    return flag ? null : { variable: varName, value: varValue, firstValue: values }
  },
  validateEndsNotWith: function (varName, varValue, values) {
    for ( var c in values) {
      if (varValue.endsWith(values[c])) {
        return { variable: varName, value: varValue, firstValue: values[c] };
      }
    }
    return null;
  },
  validateContains: function (varName, varValue, values) {
    for ( var c in values) {
      if (!varValue.includes(values[c])) {
        return { variable: varName, value: varValue, firstValue: values[c] };
      }
    }
    return null;
  },
  validateContainsAny: function (varName, varValue, values) {
    for ( var c in values) {
      if (varValue.includes(values[c])) {
        return null;
      }
    }
    return { variable: varName, value: varValue, firstValue: values };
  }
}