const dataType = require('../dataType');

function getErrorMessageBy(key) {
  switch ( key ) {
    //General
    case 'required': return ':variable is required';
    case 'required_if': return ':variable is required';
    case 'same': return ':variable is not equal to :firstValue';
    //Boolean
    case 'boolean': return ':variable is not boolean';
    //Integer
    case 'numeric': return ':variable is not number';
    case 'between': return ':variable should be greater than :firstValue and less than :secondValue';
    case 'gt': return ':variable should be greater than :firstValue';
    case 'gte': return ':variable should be greater than or equals to :firstValue';
    case 'lt': return ':variable should be less than :firstValue';
    case 'lte': return ':variable should be less than or equals to :firstValue';
    case 'odd': return ':variable is not odd number';
    case 'even': return ':variable is not even number';
    //String
    case 'alpha': return ':variable does not match alpha';
    case 'alphanumeric': return ':variable does not match alphanumeric';
    case 'uppercase': return ':variable does not match uppercase';
    case 'lowercase': return ':variable does not match lowercase';
    case 'min': return ':variable\'s length is less than :firstValue';
    case 'max': return ':variable\'s length is greater than :firstValue';
    case 'size': return ':variable\'s length not equal to :firstValue';
    case 'starts_with': return ':variable does not starts with :firstValue';
    case 'starts_not_with': return ':variable does starts with :firstValue';
    case 'ends_with': return ':variable does not ends with :firstValue';
    case 'ends_not_with': return ':variable does ends with \':firstValue\'';
    case 'contains': return ':variable does not contains \':firstValue\'';
    case 'contains_any': return ':variable does not contains any of :firstValue';
    case 'in': return ':variable\'s value is not in array';
    case 'not_in': return ':variable\'s value is in invalid array';
    //Email
    case 'email': return ':variable is invalid';
    //Date
    case 'date': return ':variable is not in date format';
    case 'after': return ':variable is not after :firstValue';
    case 'after_or_equals': return ':variable is not after or equals to :firstValue';
    case 'before': return ':variable is not before :firstValue';
    case 'before_or_equals': return ':variable is not before or equals to :firstValue';
    default: return ':variable is invalid'
  }
}
var transalate = function (key, error, params = {}) {
  var isMessagePresent = !dataType.isEmpty(params[error.variable + '.' + key])
  return {
    key: error.variable,
    message: (
        isMessagePresent ?
          params[error.variable + '.' + key] :
          getErrorMessageBy(key)
      )
      .replace(":variable", error.variable)
      .replace(":value", error.value)
      .replace(":firstValue", error.firstValue)
      .replace(":secondValue", error.secondValue)
      //.replace index and value from data
  };
}
module.exports = transalate